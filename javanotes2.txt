        /* IntelliJ keyboard commands */
        /*
            Ctrl + Shift + F10 = run
            Ctrl + F9 = recompile
            Alt + F12 = terminal
            Ctrl = hold ctrl and click on class name to go to class, or method
            Ctrl + B = go to class
            Alt + Enter = after hovering over red/error code, give choices to fix
            Ctrl + P = look at possible paremeters to enter
            Shift + Tab = tab backward
            Shift + Enter = enter line below
            Ctrl + Alt + Enter = enter line above
            Ctrl + Y = delete line
            Ctrl + / = comment out
            Ctrl + D = duplicate line
            Alt + Shift + Up = move line of code up
            Alt + Shift + Down = move line down
            Ctrl + Shift + J = put curser at end of end, this will append the next line to current line
            Ctrl + B + click on method = take you to method
            Ctrl + N = brings up search, search for file/class
            Ctrl + O = override
            Ctrl + Alt + V = assign to a variable
            Ctrl + Alt + N = inline a variable
            Ctrl + Alt + M = turn into a method
            Ctrl + Alt + T = surroung code in a while/if loop
            Shift + F6 = rename all instances of a variable
            Alt + Shift + click = create two cursors to type on two lines
            Ctrl + W = select bits of text (incrementally) within an element
            Ctrl + Shift + T = navigate to test class from class that you are testing
            Alt + 1 = close project pane
            Ctrl + Alt + O = optimize imports, remove unused
         */

to run a compiled java app:
java -cp .\out\production\ControlFlow\ WhileLoops
(class path)

===

frameworks for automatic testing [unit testing]
as add-on libraries (dependencies)

using Maven and Gradle

J-Unit
	the most popular unit test

TDD = Test Driven Development

===

right click GuessingGame > Open Module Settings
Libraries > + > From Maven
org.junit.jupiter

right click GuessingGame > Open Module Settings
Modules > right click src > New Folder
	main
	test

click on main > Sources
test > Tests

===

public interface Employee {

}

used as

public class Programmer implements Employee {

}

-

public class Employee {

}

used as:

public class Programmer extends Employee {

}

===

right click > refactor > pull members up
	can bring to extended class

===

class interface vs class hierarchy with super class vs abstract class

===

Effective Java
by
Joshua Bloch

===

by making a class final, we prevent other classes from extended it
non-static class is known as inner-class

when to use a static nested class vs. a non-static inner class?

if you don't need anything more than what you would get from a static nested class, and if you may need to refer to that static nested class in more than one place, then static is advised.
if your nested class needs to be able to access fields of the enclosing class, then you may need to consider using an inner class.

static = not allowed to access fields on it's enclosing class

this is not allowed:

private static void myMethod() {
	this.firstNamer = "";
}

fields of a class only exist once you create an instance of that class. but static members of a class exist prior to, during, and after the creation of instances of that class.

static classes can not access non-static members of an enclosing class.

however, we can access fields with an inner-class:

private final class MyInnerClass {
	public int getStuff() {
		System.our.println(firstName);
		return 0;
	}
}

narrowest implementation of a nested class:

default -> new Employee() {

                    @Override
                    public int getSalary() {
                        return 0;
                    }
                };

=====

Most boilerplate Java classes will contain:
 - Two Constructors
	- No arg default constructor
	- Some/all fields constructor
 - Getters and setters (usually comprising all fields of the class)
 - equals and hashCode methods (overrides)
 - ToString method (override)

These longwinded declarations can be simplified in newer versions of Java with a "record"

public record Weirdo(String lastName, String firstName, LocalDate dob) {
}

Weirdo larry = new Weirdo("David", "Larry", LocalDate.of(1950, 1, 1));
System.out.println(larry.firstName());

We can not change fields on a record once instantiated.  No setters.
Records can not extend any class.  They are final.
They can implement an interface.
No abstraction for records.
They can be nested inside of other classes.